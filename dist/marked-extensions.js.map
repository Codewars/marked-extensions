{"version":3,"file":"marked-extensions.js","sources":["../src/objects.js","../src/strings.js","../src/doc-tokens/doc-types.js","../src/doc-tokens/doc-names.js","../src/doc-tokens/doc-globals.js","../src/doc-tokens/index.js","../src/renderer.js","../src/index.js"],"sourcesContent":["/**\n * Assigns the keys from source into target, but only those that are not already assigned. Useful\n * in place of Object.assign which would require a polyfill\n * @param target\n * @param source\n * @returns {*}\n */\nexport function assignMissing (target, source) {\n  Object.keys(source || {}).forEach(key => {\n    if (!(key in target)) {\n      target[key] = source[key];\n    }\n  })\n  return target;\n}\n","export function upperCaseWords (str) {\n  if (!str) return str\n  return str.replace(/(?:^|\\s)\\S/g, a => a.toUpperCase())\n}\n\nexport function camelCase (str, pascal) {\n  const cased = upperCaseWords(str.replace(/_/g, ' ')).replace(/ /g, '')\n  return pascal ? cased : lowerCaseFirst(cased)\n}\n\nexport function lowerCaseFirst (str) {\n  return `${str[0].toLowerCase()}${str.substr(1)}`;\n}\n\nexport function escapeHtml (text) {\n  return text ? text.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;') : text;\n}\n\nexport function unescapeHtml (text) {\n  return text ? text.replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>') : text;\n}\n","import { escapeHtml, unescapeHtml } from '../strings'\n\n/**\n * Tracks some basic types that we convert for different languages. We don't need to try to\n * maintain a list for every type for every language we support, however we do want to track some\n * common types, such as hash, void, and primary types to minimize confusion.\n *\n * We will want to expand or trim this list as needed to find a good balance between useful and\n * too much language specialization.\n *\n */\nconst TYPES = {\n  void: {\n    'undefined': ['javascript'],\n    nil: ['ruby'],\n    None: ['python']\n  },\n  'null': {\n    nil: ['ruby'],\n    NSNull: ['objc'],\n    None: ['python']\n  },\n  object: {\n    NSObject: ['objc'],\n    _alias: 'hash'\n  },\n  hash: {\n    Hash: ['ruby'],\n    dict: ['python'],\n    Dictionary: ['csharp'],\n    HashMap: ['java'],\n    Object: ['javascript']\n  },\n  collection: {\n    List: ['java'],\n    Collection: ['csharp'],\n    _alias: 'list'\n  },\n  array: {\n    List: ['java'],\n    'NSArray*': ['objc'],\n    'std::list': ['cpp'],\n    default: 'Array'\n  },\n  list: {\n    Array: ['javascript', 'ruby', 'python', 'typescript'],\n    'std::list': ['cpp'],\n    default: 'List'\n  },\n  string: {\n    string: ['csharp', 'typescript'],\n    'std::string': ['cpp'],\n    'char*': ['c'],\n    'NSString *': ['objc'],\n    default: 'String'\n  },\n  integer: {\n    int: ['csharp', 'cpp', 'c'],\n    Int: ['swift'],\n    'NSNumber *': ['objc'],\n    Number: ['javascript'],\n    default: 'Integer'\n  },\n  boolean: {\n    bool: ['csharp', 'c', 'cpp'],\n    Bool: ['swift'],\n    BOOL: ['objc'],\n    boolean: ['java', 'typescript'],\n    default: 'Boolean'\n  },\n  float: {\n    float: ['csharp'],\n    Number: ['javascript'],\n    default: 'Float'\n  },\n}\n\nconst NULLABLE = {\n  csharp: {\n    default: 'Nullable<@@>'\n  }\n}\n\n/**\n * Long story short this handles these types of cases\n * <code>@@docType:Array</code>\n * <code>@@docType:Array<String></code>\n * `@@docType:Array`\n * `@@docType:Array<String>`\n * `@@docType:Array<String, Int>`\n * `@@docType:Array<String,Int>`\n * @@docType:Array<String, Int>\n * @@docType:Array\n * @type {RegExp}\n */\nconst regex = /(`|<code>|<pre>)?@@docType: ?([a-zA-Z_?]*(?:<[a-zA-Z?]*(?:(?:,|, )[a-zA-Z]*)?>)?)(`|<\\/code>|<\\/pre>)?/g;\n\n/**\n * process all @@docType: tokens and replaces them with the correct display value, and possibly wraps them in a dfn tag\n * @param language\n * @param pre Boolean that determines if we are displaying this content within a pre element, so don't wrap with dfn tags\n * @param content The content to be replaced. Can handle replacing multiple tags at once\n */\nexport function replaceDocTypes (language, pre, content) {\n  // unescape HTML to make it easier to process\n  content = unescapeHtml(content);\n\n  return content.replace(regex, function (shell, codeStart, value, codeEnd) {\n\n    const nullable = !!value.match(/\\?$/);\n    value = value.replace('?', '').trim();\n\n    if (value.indexOf('<') > 0) {\n      const parts = value.split(/[<>]/);\n      value = collectionType(language, parts[0], parts[1]);\n    }\n    else {\n      value = mapType(language, value);\n    }\n\n    if (nullable) {\n      value = mapNullable(language, value);\n    }\n\n    return wrap(value, shell, pre, codeStart, codeEnd);\n  })\n}\n\nfunction mapNullable (language, value) {\n  if (NULLABLE[language]) {\n    const config = NULLABLE[language][value] || NULLABLE[language].default;\n    if (config) {\n      return config.replace('@@', value);\n    }\n  }\n\n  return value;\n}\n\n\nfunction mapType (language, type, _default) {\n  const map = TYPES[type.toLowerCase()];\n  let mapped = null;\n  if (map) {\n    Object.keys(map).forEach(key => {\n      if (!mapped) {\n        if (key === 'default') {\n          mapped = map.default;\n        }\n        // if a string, then the value is an alias to another type\n        else if (key === '_alias') {\n          mapped = mapType(language, map._alias, type);\n        }\n        else if (map[key].indexOf(language) >= 0) {\n          mapped = key;\n        }\n      }\n    })\n    return mapped || _default || type;\n  }\n\n  return type;\n}\n\nfunction collectionType (language, type, nestedType) {\n  const nestedTypes = nestedType.split(/, ?/);\n\n  switch (language) {\n    case 'javascript':\n    case 'ruby':\n    case 'objc':\n    case 'python':\n      return `${mapType(language, type)} (of ${mapTypes(language, nestedTypes).join('s/')}s)`;\n\n    case 'csharp':\n      if (type === 'Array' && nestedTypes.length == 1) {\n        return `${mapType(language, nestedType)}[]`;\n      }\n      return collectionGeneric(language, type, nestedTypes);\n\n    default:\n      return collectionGeneric(language, type, nestedTypes);\n  }\n}\n\nfunction mapTypes(language, types) {\n  return types.map(t => mapType(language, t));\n}\n\nfunction collectionGeneric (language, type, nestedTypes) {\n  const mapped = mapTypes(language, nestedTypes).join(', ');\n  return `${mapType(language, type)}<${mapped}>`;\n}\n\n/**\n * Wraps the value within the necessary html to ensure that it gets rendered correctly\n * @param value\n * @param shell the shell of the @@docType syntax. Used to determine if a ` is present\n * @returns {string}\n */\nfunction wrap (value, shell, pre, start, end) {\n  value = escapeHtml(value.trim());\n\n  if (pre) {\n    return value;\n  }\n  else if (start) {\n    return start + value + (end || '');\n  }\n  else {\n    return `<dfn class=\"doc-type\">${value}</dfn>`;\n  }\n}\n","import { camelCase } from '../strings'\n\nexport const STYLES = {\n  Const: {\n    upper: ['default']\n  },\n  Param: {\n    camel: ['csharp']\n  },\n  // name acts as default\n  Name: {\n    camel: ['javascript', 'java'],\n    pascal: ['csharp']\n  }\n}\n\nexport function replaceDocNames (language, pre, content) {\n\n  return content.replace(/`?@@doc(Name|Method|Const|Prop|Class|Param): ?([a-zA-Z0-9?_]*)`?/g, function (shell, type, value) {\n    return wrap(shell, type, pre, () => {\n      if (value) {\n        const style = findStyle(type, language);\n\n        switch (style) {\n          case 'upper':\n            return value.toUpperCase();\n\n          case 'camel':\n            return camelCase(value);\n\n          case 'pascal':\n            return camelCase(value, true);\n\n          default:\n            return value;\n        }\n      }\n      else {\n        console.warn('replaceDocNames value is missing:', content); // eslint-disable-line no-console\n        return '';\n      }\n    })\n  })\n}\n\nfunction findStyle(type, language) {\n  let style = Object.keys(STYLES[type] || []).find(style => {\n    let _style = STYLES[type][style];\n    return _style ? _style.indexOf(language) >= 0 : false;\n  })\n\n  // try to find a default style for the type\n  if (!style && language !== 'default') {\n    style = findStyle(type, 'default');\n  }\n\n  // default to name if no specific style is set\n  if (!style && type !== 'Name') {\n    style = findStyle('Name', language);\n  }\n\n  return style;\n}\n\nfunction wrap (shell, type, pre, value) {\n  value = value();\n  if (shell.indexOf('`') === 0 || pre) {\n    return shell.replace(/@@docName: ?([a-zA-Z0-9?_]*)/, value);\n  }\n  else {\n    return `<dfn class=\"doc-name doc-name--${type.toLowerCase()}\">${value}</dfn>`;\n  }\n}\n","export function replaceDocGlobals (language, pre, content) {\n  return content.replace(/@@docGlobal: ?.*`?/g, function (value) {\n    switch (language) {\n      // languages which should keep the global class\n      case 'java':\n      case 'csharp':\n        return wrap(value.replace(/@@docGlobal: ?/, ''), pre);\n\n      // all other languages remove the global class\n      default:\n        return wrap(value.replace(/@@docGlobal: ?[a-zA-Z\\d]*\\./, ''), pre);\n    }\n  })\n}\n\nfunction wrap (value, pre) {\n  return pre ? value : `<dfn class=\"doc-class\">${value}</dfn>`;\n}\n","import { replaceDocTypes } from './doc-types'\nimport { replaceDocNames } from './doc-names'\nimport { replaceDocGlobals } from './doc-globals'\n\n/**\n * Preprocesses the markdown before sending it through marked. This is used to process\n * doc tokens and any other future extensions that we support that don't require being handled\n * during the marked rendering.\n * @param result\n */\nexport function processDocTokens(result, html, pre) {\n  const language = result.originalLanguage || result.language;\n  const globals = replaceDocGlobals(language, pre, html);\n  const types = replaceDocTypes(language, pre, globals);\n  const names = replaceDocNames(language, pre, types);\n\n  return names;\n}\n","import { assignMissing } from './objects'\nimport { processDocTokens } from './doc-tokens'\n\nexport function buildRenderer(marked, options, result) {\n  const renderer = result.renderer = new marked.Renderer();\n\n  const markedOptions = { renderer };\n  assignMissing(markedOptions, options.marked || {});\n\n  // provide the render method, this will also be used later to render nested blocks\n  result.render = (md) => marked(md, markedOptions);\n\n  setupHeader(renderer, options, result);\n  setupCode(options, result);\n}\n\n/**\n *\n * @param renderer\n */\nfunction setupHeader(renderer, options, result) {\n  // heading extensions\n  renderer.heading = function (text, level) {\n    // you can set icons via icon::name\n    const icon = text.match(/icon::([a-z-]*)/);\n    let attributes = '';\n    if (icon) {\n      // indicate that this icon has been used\n      result.icons[icon[1]] = true;\n\n      attributes = ` class=\"${options.iconClassPrefix}${icon[1]}\"`;\n      text = text.replace(/icon::[a-z-]*/, '');\n    }\n\n    // we track headers 1 - 4 and add ids to them so that we can link to them later if we want to\n    if (level < 5) {\n      const header = result.headers[`h${level}`];\n      const index = header.length;\n      attributes += ` id=\"h${level}_${index}\"`;\n      header.push(text);\n    }\n\n    return `<h${level}${attributes}>${text}</h${level}>`;\n  }\n}\n\n/**\n * Handles code blocks in a variety of ways\n * @param options\n * @param result\n */\nfunction setupCode(options, result) {\n  const _code = result.renderer.code;\n\n  // special version of render that will process doc tokens. Needed at times when\n  // tokens are nested inside of pre and should be rendered without tags (but their labels should still be processed)\n  const render = (code, preTokens) => {\n    if (preTokens && options.docTokens) {\n      code = processDocTokens(result, code, true);\n    }\n\n    return result.render(code);\n  }\n\n\n  result.renderer.code = function(code, language) {\n    if (language) {\n      if (language.match(/^if:/)) {\n        return matchIfBlockLanguage(result, language) ? render(code) : '';\n      }\n      else if (language.match(/^if-not:/)) {\n        return matchIfBlockLanguage(result, language) ? '' : render(code);\n      }\n      else if (language.match(/^tab:/)) {\n        return handleTab(result, code, language);\n      }\n      else if (result.extensions.indexOf(language) >= 0) {\n        return handleExtension(options, result, code, language);\n      }\n      else if (language === '%definitions' || language === '%doc') {\n        return wrapInBlockDiv(language, renderDefinitions(result, code, render));\n      }\n      else if (language[0] === '%') {\n        return wrapInBlockDiv(language, result.render(code));\n      }\n\n      // process line numbers, if they are set (i.e. ruby:10)\n      if (options.lineNumbers) {\n        code = lineNumbers(options, code, language);\n      }\n\n      // make sure this is a language and not some random tag\n      const foundLanguage = options.findLanguage(language.split(':')[0]);\n\n      if (foundLanguage) {\n        // if filtering is enabled and this is not the active language then filter it out\n        if (options.filterLanguages && foundLanguage !== result.language) {\n          return '';\n        }\n\n        // if CodeMirror is provided then highlight using that instead\n        if (options.cm) {\n          return highlightCM(options, code, foundLanguage, language);\n        }\n      }\n    }\n\n    return wrapLanguage(options, _code.call(result.renderer, code, language), language);\n  }\n}\n\nfunction lineNumbers(options, code, language) {\n  let lineNumber = getLineNumber(language);\n\n  // if there are line numbers, then add them now starting at the start index\n  if (lineNumber > 0) {\n    code = code.split('\\n').map(line => {\n      // pad out the spaces\n      // TODO: this code is naive and can only handle line numbers less than 999\n      let spaces = lineNumber < 10 ? '  ' : (lineNumber < 100 ? ' ' : '')\n      return `${spaces}${lineNumber++} ${line}`\n    }).join('\\n');\n  }\n\n  return code;\n}\n\nfunction wrapLanguage(options, code, language) {\n  // if we have reached this point then CM isn't enabled and we need to\n  if (language && options.languageWrapper) {\n    if (typeof options.languageWrapper === 'function') {\n      code = options.languageWrapper(code, language);\n    }\n    else {\n      code = options.languageWrapper.replace('{slot}', code);\n    }\n  }\n\n  return code;\n}\n\nfunction highlightCM(options, code, language, raw) {\n  let lineNumber = options.lineNumbers ? getLineNumber(raw) : null;\n  const el = window.document.createElement('div');\n  options.cm.runMode(code, options.findMode(language), el);\n\n  const lnHtml = lineNumber > 0 ? `<div class=\"${options.lineNumbersGutter}\"></div>` : '';\n  const result = `<pre class=\"cm-runmode cm-s-${options.theme}\"><code>${lnHtml}${el.innerHTML}</code></pre>`;\n  return wrapLanguage(options, result, language);\n}\n\nfunction getLineNumber(language) {\n  const parts = language.split(':');\n  return parts.length > 1 ? parseInt(parts[1], 10) : null;\n}\n\nfunction wrapInBlockDiv(type, contents) {\n  return `<div class=\"block block--${type.replace(/^%/, '')}\">${contents}</div>`;\n}\n\nfunction matchIfBlockLanguage(result, language) {\n  return language.replace(/^if(-not)?: ?/, '').split(',').indexOf(result.language) >= 0;\n}\n\nfunction handleTab(result, code, language) {\n  // parts should be up to tab:LABEL with language being optional\n  const parts = language.split(':');\n  let label = parts[1].replace(/\\+/g, ' ');\n  result.tabs[label] = `${result.render(code)}`;\n  return '';\n}\n\n/**\n * If the extension value is a function, it will treat it as a render function, otherwise it will\n * assume the extension value is a string and treat it as a template with {code} as the code placeholder.\n * @param options\n * @param code\n * @param language\n */\nfunction handleExtension(options, result, code, language) {\n  const ext = options.extensions[language]\n\n  if (typeof ext.code === 'function') {\n    return ext.code(code, options);\n  }\n  else {\n    return ext.code.replace('{code}', code);\n  }\n}\n\n/**\n *\n * @param result\n * @param code\n * @returns {string}\n */\nfunction renderDefinitions (result, code, render) {\n  var html = '<dl>';\n  if (code) {\n    code.split('\\n').forEach(line => {\n      if (line.match(/^#/)) {\n        html += render(line);\n      }\n      else if (line.match(/: *$/)) {\n        html += `<dt>${line.replace(/:$/, '')}</dt>`;\n      }\n      else {\n        // if line starts with 4 white spaces, a tab or a ` block, then consider it a pre tag and don't render dfn\n        html += `<dd>${render(line, !!line.match(/^(\\t|\\s{4}|`)/))}</dd>`;\n      }\n    });\n  }\n\n  return html + '</dl>';\n}\n","import { assignMissing } from './objects'\nimport { buildRenderer } from './renderer'\nimport { processDocTokens } from './doc-tokens'\n\nexport const defaultOptions = {\n  // these are the options passed to marked directly\n  marked: {},\n  // languages that should be treated as extensions. You can configure how each gets handled\n  extensions: {\n    mermaid: {\n      // code handler\n      code: code => `<div class=\"mermaid\">${code}</div>`,\n      // will lazy load script automatically\n      src: 'https://cdn.rawgit.com/knsv/mermaid/6.0.0/dist/mermaid.min.js',\n      afterRender: () => window.mermaid && window.mermaid.init()\n    },\n  },\n  // set to a method that that will receive a language and return the mapped\n  // name. if no name is returned, it is assumed that the language is an extension.\n  // The default method only handles a default set of languages.\n  findLanguage: (language) => defaultLanguages.indexOf(language) >= 0 ? language: null,\n\n  // used with CodeMirror.runMode, used to find the mode of the language. By default will just return the language\n  findMode: (language) => language,\n\n  // The highlight theme to add, only used with cm runMode\n  theme: 'neo',\n\n  // you can set icons within headers using icon::ICONNAME, this setting determines the icon class prefix used\n  iconClassPrefix: 'icon-',\n\n  // set to a value that should wrap standard languages. Use \"{slot}\" to indicate where the code should be inserted: i.e.\n  // '<div class=\"tab\">{code}</div>'. Can also be a function which takes (code, language) as its parameters.\n  languageWrapper: null,\n\n  // the language that should be used for filtering out all other languages\n  language: null,\n\n  // true if languages should be filtered\n  filterLanguages: true,\n\n  // if the language value is not set, or is set to a value not found within the markdown, this\n  // setting will default the language to the first one found within the markdown.\n  defaultLanguageToFirst: true,\n\n  // true if line numbers should be added to highlighted code (if a starting line number is configured for the block)\n  lineNumbers: true,\n\n  // css class used to display a line number gutter, which can be used to try to create an opacity layer\n  // which will style the cm-number values differently. Set to null to disable adding a gutter.\n  lineNumbersGutter: 'cm-runmode-linenumbers-gutter',\n\n  // true if doc tokens should be parsed\n  docTokens: true,\n\n  // if set to an instance of js-yaml, it will process meta data at the top of the markdown.\n  jsYaml: null,\n\n  // If set to CodeMirror class, it will use CodeMirror.runMode to process syntax highlighting\n  // Note: make sure to import codemirror/addon/runmode/runmode.js first.\n  cm: null,\n\n  // set to automatically load a CM language. This is provided by default but you can override if you wish\n  // to override. This option is only used if both cm and loadScript are set.\n  // You can set this to null if you do not wish or need to load languages dynamically\n  loadCMLanguage: (language, options) => {\n    return options.loadScript(`//cdnjs.cloudflare.com/ajax/libs/codemirror/${options.cm.version}/mode/${language}/${language}.min.js`);\n  },\n\n  // If you wish to support loading external extension scripts, you should set this to a\n  // function that takes a url and returns a promise. Note that this function will need to be responsible\n  // for not reloading the same scripts if requested more than once, this library does not take care of caching.\n  loadScript: null,\n\n  // if set to a function, will be called back after all external scripts have loaded\n  onLoaded: null\n};\n\nexport const defaultLanguages = [\n  'c', 'clojure', 'coffeescript', 'cpp', 'csharp', 'elixir', 'erlang', 'fsharp',\n  'go', 'groovy', 'haskell', 'java', 'javascript', 'kotlin', 'objc', 'ocaml', 'php', 'python',\n  'r', 'ruby', 'scala', 'shell', 'solidity', 'sql', 'swift', 'typescript'\n]\n\n/**\n * Processes the markdown using marked along with the many extensions this library provides\n * @param marked The marked library, must be passed in since it is not included within this library as a dependency\n * @param markdown The markdown to process\n * @param options The extended set of options, as well as marked options. See defaultOptions for more details.\n * @returns {{originalLanguage, language, languages: [], extensions: [], tabs: {}, headers: {h1: Array, h2: Array, h3: Array, h4: Array}, icons: [], raw: *, preprocessed: *}}\n */\nexport function process(marked, markdown, options = {}) {\n  assignMissing(options, defaultOptions);\n\n  const result = {\n    originalLanguage: options.language,\n    language: options.language,\n    languages: {},\n    extensions: {},\n    tabs: {},\n    headers: {h1: [], h2: [], h3: [], h4: []},\n    icons: {},\n    raw: markdown,\n    preprocessed: markdown\n  };\n\n  if (options.jsYaml) {\n    processMeta(options, result);\n  }\n\n  processBlocks(options, result);\n  if (options.defaultLanguageToFirst) {\n    processLanguage(result);\n  }\n\n  buildRenderer(marked, options, result);\n\n  var html = null;\n  result.html = () => html || (html = render(options, result));\n  result.afterRender = afterRenderFn(options, result);\n\n  // convert objects which have been acting as basic sets to an array\n  ['languages', 'extensions', 'icons']\n    .forEach(key => result[key] = Object.keys(result[key]));\n\n  if (options.loadScript) {\n    processExternalScripts(options, result);\n  }\n\n  return result;\n}\n\nfunction render(options, result) {\n  let html = result.render(result.preprocessed);\n\n  if (options.docTokens) {\n    html = processDocTokens(result, html);\n  }\n\n  return html;\n}\n\n\n\n/**\n * Creates the afterRender function that is added to the result, which can be called once the\n * processed html has been added to the DOM to initialize any extensions that may have been loaded.\n * @param options\n * @param result\n * @returns {Function}\n */\nfunction afterRenderFn(options, result) {\n  return function() {\n    result.extensions.forEach(ext => {\n      const config = options.extensions[ext];\n      if (config && config.afterRender) {\n        config.afterRender.apply(result, arguments);\n      }\n    });\n  }\n}\n\n/**\n * Will loop through extensions and languages and try to dynamically load scripts.\n * @param options\n * @param result\n */\nfunction processExternalScripts(options, result) {\n  const promises = [];\n  result.extensions.forEach(ext => {\n    const config = options.extensions[ext];\n    if (config && config.src) {\n      promises.push(options.loadScript(config.src));\n    }\n  });\n\n  // automatically load the CM language that is shown\n  if (options.cm && options.loadCMLanguage) {\n    // if we filter languages then we only need to load the one being shown\n    if (options.filterLanguages && result.language) {\n      promises.push(options.loadCMLanguage(result.language, options));\n    }\n    // otherwise we need to load them all\n    else if (!options.filterLanguages && result.languages.length) {\n      result.languages.forEach(language => {\n        promises.push(options.loadCMLanguage(language, options));\n      });\n    }\n  }\n\n  Promise.all(promises).then(() => {\n    if (options.onLoaded) {\n      options.onLoaded(result);\n    }\n  });\n}\n\n/**\n * Processes yaml content at the top of the markdown, marked starting by a --- and ending with a ...\n * @param options\n * @param result\n */\nfunction processMeta(options, result) {\n  result.preprocessed = result.preprocessed.replace(/^---\\n(.*\\n)*\\.\\.\\. *\\n\\n?/, meta => {\n    const yaml = meta.replace(/^---\\n/, '').replace(/\\n\\.\\.\\. *\\n?/, '');\n    result.meta = options.jsYaml.safeLoad(yaml);\n\n    return '';\n  });\n}\n\n/**\n * if no language was provided, or the one provided is not in the list of supported languages,\n * then switch to the first language found\n * @param result\n */\nfunction processLanguage(result) {\n  if (!result.language || !result.languages[result.language]) {\n    result.language = Object.keys(result.languages)[0];\n  }\n}\n\n/**\n * Loops through all ``` style blocks and figures out which are languages and which are\n * possibly extensions\n * @param markdown\n * @param options\n * @param result\n */\nfunction processBlocks(options, result) {\n  const blocks = (result.preprocessed.match(/^(```|~~~) ?(.*) *$/gm) || []).map(m => m.replace(/(```|~~~) ?/g, ''));\n\n  // loop through each block and track which are languages and which are extensions\n  blocks.forEach((text) => {\n    if (text) {\n      text = text.replace(/^if(-not)?: ?/, '').split(':')[0];\n\n      text.split(',').forEach(name => {\n        // % is a special token, we know these aren't either languages or extensions\n        if (name.indexOf('%') === -1) {\n          // if an extension has been defined for the language, track it now\n          if (options.extensions[name]) {\n            result.extensions[name] = true;\n          }\n          else {\n            const language = options.findLanguage(name);\n            if (language) {\n              result.languages[language] = true;\n            }\n          }\n        }\n      })\n    }\n  });\n}\n"],"names":["assignMissing","target","source","keys","forEach","key","upperCaseWords","str","replace","a","toUpperCase","camelCase","pascal","cased","lowerCaseFirst","toLowerCase","substr","escapeHtml","text","unescapeHtml","TYPES","NULLABLE","regex","replaceDocTypes","language","pre","content","shell","codeStart","value","codeEnd","nullable","match","trim","indexOf","parts","split","collectionType","mapType","mapNullable","wrap","config","default","type","_default","map","mapped","_alias","nestedType","nestedTypes","mapTypes","join","length","collectionGeneric","types","t","start","end","STYLES","replaceDocNames","style","findStyle","warn","Object","find","_style","replaceDocGlobals","processDocTokens","result","html","originalLanguage","globals","names","buildRenderer","marked","options","renderer","Renderer","markedOptions","render","md","setupHeader","heading","level","icon","attributes","icons","iconClassPrefix","header","headers","index","push","setupCode","_code","code","preTokens","docTokens","matchIfBlockLanguage","handleTab","extensions","handleExtension","wrapInBlockDiv","renderDefinitions","lineNumbers","foundLanguage","findLanguage","filterLanguages","cm","highlightCM","wrapLanguage","call","lineNumber","getLineNumber","spaces","line","languageWrapper","raw","el","window","document","createElement","runMode","findMode","lnHtml","lineNumbersGutter","theme","innerHTML","parseInt","contents","label","tabs","ext","defaultOptions","mermaid","init","defaultLanguages","loadScript","version","process","markdown","h1","h2","h3","h4","jsYaml","defaultLanguageToFirst","afterRender","afterRenderFn","preprocessed","apply","processExternalScripts","promises","src","loadCMLanguage","languages","all","then","onLoaded","processMeta","yaml","meta","safeLoad","processLanguage","processBlocks","blocks","m","name"],"mappings":"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"}