{"version":3,"file":"marked-extensions.js","sources":["../src/objects.js","../src/strings.js","../src/doc-tokens/doc-types.js","../src/doc-tokens/doc-names.js","../src/doc-tokens/doc-globals.js","../src/doc-tokens/index.js","../src/method-doc.js","../src/renderer.js","../src/index.js"],"sourcesContent":["/**\n * Assigns the keys from source into target, but only those that are not already assigned. Useful\n * in place of Object.assign which would require a polyfill\n * @param target\n * @param source\n * @returns {*}\n */\nexport function assignMissing (target, source) {\n  Object.keys(source || {}).forEach(key => {\n    if (!(key in target)) {\n      target[key] = source[key];\n    }\n  })\n  return target;\n}\n","export function upperCaseWords (str) {\n  if (!str) return str\n  return str.replace(/(?:^|\\s)\\S/g, a => a.toUpperCase())\n}\n\nexport function camelCase (str, pascal) {\n  const cased = upperCaseWords(str.replace(/_/g, ' ')).replace(/ /g, '')\n  return pascal ? cased : lowerCaseFirst(cased)\n}\n\nexport function lowerCaseFirst (str) {\n  return `${str[0].toLowerCase()}${str.substr(1)}`;\n}\n\nexport function escapeHtml (text) {\n  return text ? text.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;') : text;\n}\n\nexport function unescapeHtml (text) {\n  return text ? text.replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>') : text;\n}\n","import { escapeHtml, unescapeHtml } from '../strings'\n\n/**\n * Tracks some basic types that we convert for different languages. We don't need to try to\n * maintain a list for every type for every language we support, however we do want to track some\n * common types, such as hash, void, and primary types to minimize confusion.\n *\n * We will want to expand or trim this list as needed to find a good balance between useful and\n * too much language specialization.\n *\n */\nconst TYPES = {\n  void: {\n    'undefined': ['javascript', 'coffeescript'],\n    nil: ['ruby'],\n    None: ['python']\n  },\n  'null': {\n    nil: ['ruby'],\n    NSNull: ['objc'],\n    None: ['python']\n  },\n  object: {\n    NSObject: ['objc'],\n    _alias: 'hash'\n  },\n  hash: {\n    Hash: ['ruby'],\n    dict: ['python'],\n    Dictionary: ['csharp'],\n    HashMap: ['java'],\n    Object: ['javascript', 'typescript', 'coffeescript']\n  },\n  collection: {\n    List: ['java'],\n    Collection: ['csharp'],\n    _alias: 'list'\n  },\n  array: {\n    List: ['java'],\n    'NSArray*': ['objc'],\n    'std::list': ['cpp'],\n    default: 'Array'\n  },\n  list: {\n    Array: ['javascript', 'ruby', 'python', 'typescript', 'coffeescript'],\n    'std::list': ['cpp'],\n    default: 'List'\n  },\n  string: {\n    string: ['csharp', 'typescript'],\n    'std::string': ['cpp'],\n    'char*': ['c'],\n    'NSString *': ['objc'],\n    default: 'String'\n  },\n  integer: {\n    int: ['csharp', 'cpp', 'c'],\n    Int: ['swift'],\n    'NSNumber *': ['objc'],\n    Number: ['javascript'],\n    number: ['typescript'],\n    default: 'Integer'\n  },\n  boolean: {\n    bool: ['csharp', 'c', 'cpp'],\n    Bool: ['swift'],\n    BOOL: ['objc'],\n    boolean: ['java', 'typescript'],\n    default: 'Boolean'\n  },\n  float: {\n    float: ['csharp'],\n    Number: ['javascript'],\n    default: 'Float'\n  },\n}\n\nconst NULLABLE = {\n  csharp: {\n    default: 'Nullable<@@>'\n  }\n}\n\n/**\n * Long story short this handles these types of cases\n * <code>@@docType:Array</code>\n * <code>@@docType:Array<String></code>\n * `@@docType:Array`\n * `@@docType:Array<String>`\n * `@@docType:Array<String, Int>`\n * `@@docType:Array<String,Int>`\n * @@docType:Array<String, Int>\n * @@docType: Promise<Array<Int>>\n * @@docType:Array\n * @type {RegExp}\n */\nconst regex = /(`|<code>|<pre>)?@@docType: ?([\\w_?]*(?:(?:<|&lt;)[\\w?]*(?:[,<]?\\s?\\w*>?){0,3}(?:>|&gt;))?)(`|<\\/code>|<\\/pre>)?/g;\nconst nestedRegex = /(?:<|&lt;)([\\w?]*(?:[,<]?\\s?\\w*>?){0,3})(?:>|&gt;)/g;\n\n/**\n * process all @@docType: tokens and replaces them with the correct display value, and possibly wraps them in a dfn tag\n * @param language\n * @param pre Boolean that determines if we are displaying this content within a pre element, so don't wrap with dfn tags\n * @param content The content to be replaced. Can handle replacing multiple tags at once\n */\nexport function replaceDocTypes (language, pre, content) {\n  return content.replace(regex, function (shell, codeStart, value, codeEnd) {\n    const nullable = !!value.match(/\\?$/);\n    value = value.replace('?', '').trim();\n    value = unescapeHtml(value);\n\n    value = maybeMapGeneric(language, value);\n\n    if (nullable) {\n      value = mapNullable(language, value);\n    }\n\n    return wrap(value, shell, pre, codeStart, codeEnd);\n  });\n}\n\nfunction mapNullable (language, value) {\n  if (NULLABLE[language]) {\n    const config = NULLABLE[language][value] || NULLABLE[language].default;\n    if (config) {\n      return config.replace('@@', value);\n    }\n  }\n\n  return value;\n}\n\nfunction maybeMapGeneric(language, value) {\n  const parts = value.split(nestedRegex).filter(p => !!p);\n\n  if (parts.length < 2) {\n    return mapType(language, value);\n  }\n  else if (parts.length === 2) {\n    return collectionType(language, parts[0], parts[1]);\n  }\n  else {\n    const root = parts.shift();\n    const mapped = parts.map(p => collectionType(language, p));\n    return `${root}<${mapped.join(', ')}>`;\n  }\n}\n\nfunction mapType (language, type, _default) {\n  const map = TYPES[type.toLowerCase()];\n  let mapped = null;\n  if (map) {\n    Object.keys(map).forEach(key => {\n      if (!mapped) {\n        if (key === 'default') {\n          mapped = map.default;\n        }\n        // if a string, then the value is an alias to another type\n        else if (key === '_alias') {\n          mapped = mapType(language, map._alias, type);\n        }\n        else if (map[key].indexOf(language) >= 0) {\n          mapped = key;\n        }\n      }\n    })\n    return mapped || _default || type;\n  }\n\n  return type;\n}\n\nfunction isTransformedType(type) {\n  return Object.keys(TYPES).indexOf(type.toLowerCase()) > -1;\n}\n\nfunction collectionType (language, type, nestedType) {\n  const nestedTypes = nestedType.split(/, ?/);\n  if (isTransformedType(type)) {\n    switch (language) {\n      // case 'javascript':\n\n      case 'ruby':\n      case 'objc':\n      case 'python':\n        let plurals = mapTypes(language, nestedTypes)\n          .map(s => s.replace(' *', ''))\n          .join('s/');\n\n        let addS = plurals.indexOf(')') > 0 ? '' : 's';\n        return `${mapType(language, type)} (of ${plurals}${addS})`;\n\n      case 'csharp':\n        if (type === 'Array' && nestedTypes.length == 1) {\n          return `${mapType(language, nestedType)}[]`;\n        }\n        break;\n    }\n  }\n  const result = collectionGeneric(language, type, nestedTypes);\n  return result;\n}\n\nfunction mapTypes(language, types) {\n  return types.map(t => maybeMapGeneric(language, t));\n}\n\nfunction collectionGeneric (language, type, nestedTypes) {\n  const mapped = mapTypes(language, nestedTypes).join(', ');\n  return `${mapType(language, type)}<${mapped}>`;\n}\n\n/**\n * Wraps the value within the necessary html to ensure that it gets rendered correctly\n * @param value\n * @param shell the shell of the @@docType syntax. Used to determine if a ` is present\n * @returns {string}\n */\nfunction wrap (value, shell, pre, start, end) {\n  value = escapeHtml(value.trim());\n\n  if (pre) {\n    return value;\n  }\n  else if (start) {\n    return start + value + (end || '');\n  }\n  else {\n    return `<dfn class=\"doc-type\">${value}</dfn>`;\n  }\n}\n","import { camelCase } from '../strings'\n\nexport const STYLES = {\n  Const: {\n    upper: ['default']\n  },\n  Method: {\n    upperCamel: ['csharp']\n  },\n  Prop: {\n    upperCamel: ['csharp']\n  },\n  Class: {\n    upperCamel: ['default']\n  },\n  // name acts as default\n  Name: {\n    camel: ['javascript', 'java', 'coffeescript', 'typescript', 'go', 'kotlin', 'scala', 'objc', 'php', 'swift', 'csharp', 'solidity'],\n  }\n}\n\nexport function replaceDocNames (language, pre, content) {\n\n  return content.replace(/`?@@doc(Name|Method|Const|Prop|Class|Param): ?([a-zA-Z0-9?_]*)`?/g, function (shell, type, value) {\n    return wrap(shell, type, pre, () => {\n      if (value) {\n        const style = findStyle(type, language);\n\n        switch (style) {\n          case 'upper':\n            return value.toUpperCase();\n\n          case 'camel':\n            return camelCase(value);\n\n          case 'upperCamel':\n            return camelCase(value, true);\n\n          default:\n            return value;\n        }\n      }\n      else {\n        console.warn('replaceDocNames value is missing:', content); // eslint-disable-line no-console\n        return '';\n      }\n    })\n  })\n}\n\nfunction findStyle(type, language) {\n  let style = Object.keys(STYLES[type] || []).find(style => {\n    let _style = STYLES[type][style];\n    return _style ? _style.indexOf(language) >= 0 : false;\n  })\n\n  // try to find a default style for the type\n  if (!style && language !== 'default') {\n    style = findStyle(type, 'default');\n  }\n\n  // default to name if no specific style is set\n  if (!style && type !== 'Name') {\n    style = findStyle('Name', language);\n  }\n\n  return style;\n}\n\nfunction wrap (shell, type, pre, value) {\n  value = value();\n  if (shell.indexOf('`') === 0 || pre) {\n    return shell.replace(/@@doc(Name|Method|Const|Prop|Class|Param): ?([a-zA-Z0-9?_]*)/, value);\n  }\n  else {\n    return `<dfn class=\"doc-name doc-name--${type.toLowerCase()}\">${value}</dfn>`;\n  }\n}\n","export function replaceDocGlobals (language, pre, content) {\n  return content.replace(/@@docGlobal: ?.*`?/g, function (value) {\n    switch (language) {\n      // languages which should keep the global class\n      case 'java':\n      case 'csharp':\n      case 'kotlin':\n      case 'scala':\n        return wrap(value.replace(/@@docGlobal: ?/, ''), pre);\n\n      // all other languages remove the global class\n      default:\n        return wrap(value.replace(/@@docGlobal: ?[a-zA-Z\\d]*\\./, ''), pre);\n    }\n  })\n}\n\nfunction wrap (value, pre) {\n  return pre ? value : `<dfn class=\"doc-class\">${value}</dfn>`;\n}\n","import { replaceDocTypes } from './doc-types'\nimport { replaceDocNames } from './doc-names'\nimport { replaceDocGlobals } from './doc-globals'\n\n/**\n * Preprocesses the markdown before sending it through marked. This is used to process\n * doc tokens and any other future extensions that we support that don't require being handled\n * during the marked rendering.\n * @param result\n */\nexport function processDocTokens(result, html, pre) {\n  const language = result.originalLanguage || result.language;\n  const globals = replaceDocGlobals(language, pre, html);\n  const types = replaceDocTypes(language, pre, globals);\n  const names = replaceDocNames(language, pre, types);\n\n  return names;\n}\n","export function methodDoc(code) {\n  try {\n    let json = JSON.parse(code);\n    const md = [methodHeader(json)];\n    if (json.desc) {\n      md.push(json.desc);\n    }\n    if (json.args) {\n      md.push('```%doc\\nParameters:');\n      md.push(parameters(json));\n    }\n    md.push('Return Value:');\n    md.push(returnType(json));\n    if (json.constraints && json.constraints.length) {\n      md.push('Constraints:');\n      md.push(json.constraints.join('\\n'));\n    }\n    if (json.errors && json.errors.length) {\n      md.push('Errors:');\n      md.push(json.errors.join('\\n'));\n    }\n    md.push('```');\n    if (json.examples && json.examples.length) {\n      md.push('```%doc-block');\n      md.push('#### Examples');\n      md.push(exampleHeader(json));\n      md.push(exampleRows(json));\n      md.push('```');\n    }\n\n    return md.join('\\n');\n  }\n  catch (ex) {\n    return '`Failed to render %jsonblock: ' + ex.message + '`';\n  }\n}\n\nfunction exampleRows(json) {\n  return json.examples.map((v, i) => exampleRow(json, v, i)).join('\\n');\n}\n\nfunction exampleRow(json, example, index) {\n  const name = example.name || `Ex. #${index+1}`;\n  let md = `*${name}*|`;\n  md += example.args.map(arg => '`' + JSON.stringify(arg) + '`').join('|');\n  md += `|\\`${JSON.stringify(example.returns) || ''}\\``;\n  return md;\n}\n\nfunction exampleHeader(json) {\n  const line1 = [''];\n  const line2 = [''];\n  Object.keys(getArgs(json)).forEach(key => {\n    line1.push(key)\n    line2.push('');\n  });\n  line1.push('Return Value');\n  return `${line1.join('|')}\\n-${line2.join('|-')}|-`;\n}\n\nfunction getArgs(json) {\n  return json.args || json.params || json.parameters || {};\n}\n\nfunction methodName(json) {\n  let globalName = json.global !== false ? `@@docGlobal:${json.global || 'Challenge'}.` : '';\n  // if a class is provided, it will always be shown and overrides global\n  if (json.class) {\n    globalName = `@@docClass:${json.class}.`;\n  }\n\n  return `${globalName}@@docMethod:${json.method}`;\n}\n\nfunction methodHeader(json) {\n  const args = Object.keys(getArgs(json)).map(key => `\\`@@docName:${key}\\``);\n  return `### \\`${methodName(json)}\\`(${args.join(', ')})`;\n}\n\nfunction parameters(json) {\n  const args = getArgs(json);\n  const params = Object.keys(args).map(key => {\n    const arg = args[key];\n    const type = typeof arg === 'string' ? arg : arg.type;\n    let md = `@@docName:${key}: @@docType:${type || 'String'}`;\n    if (arg.desc) {\n      md += ` - ${arg.desc}`;\n    }\n\n    return md;\n  });\n\n  return params.join('\\n');\n}\n\nfunction returnType(json) {\n  if (json.returns) {\n    const type = typeof json.returns === 'string' ? json.returns : json.returns.type;\n    let md = `@@docType:${type || 'void'}`;\n    if (json.returns.desc) {\n      md += ` - ${json.returns.desc}`;\n    }\n\n    return md;\n  }\n  return '@@docType:void';\n}\n","import { assignMissing } from './objects'\nimport { processDocTokens } from './doc-tokens'\nimport { methodDoc } from './method-doc';\n\n\nexport function buildRenderer(marked, options, result) {\n  const renderer = result.renderer = new marked.Renderer();\n\n  const markedOptions = { renderer };\n  assignMissing(markedOptions, options.marked || {});\n\n  // provide the render method, this will also be used later to render nested blocks\n  result.render = (md) => marked(md, markedOptions);\n\n  setupHeader(renderer, options, result);\n  setupCode(options, result);\n}\n\n/**\n *\n * @param renderer\n */\nfunction setupHeader(renderer, options, result) {\n  // heading extensions\n  renderer.heading = function (text, level) {\n    // you can set icons via icon::name\n    const icon = text.match(/icon::([a-z-]*)/);\n    let attributes = '';\n    if (icon) {\n      // indicate that this icon has been used\n      result.icons[icon[1]] = true;\n\n      attributes = ` class=\"${options.iconClassPrefix}${icon[1]}\"`;\n      text = text.replace(/icon::[a-z-]*/, '');\n    }\n\n    // we track headers 1 - 4 and add ids to them so that we can link to them later if we want to\n    if (level < 5) {\n      const header = result.headers[`h${level}`];\n      const index = header.length;\n      attributes += ` id=\"h${level}_${index}\"`;\n      header.push(text);\n    }\n\n    return `<h${level}${attributes}>${text}</h${level}>`;\n  }\n}\n\n/**\n * Handles code blocks in a variety of ways\n * @param options\n * @param result\n */\nfunction setupCode(options, result) {\n  const _code = result.renderer.code;\n\n  // special version of render that will process doc tokens. Needed at times when\n  // tokens are nested inside of pre and should be rendered without tags (but their labels should still be processed)\n  const render = (code, preTokens) => {\n    if (preTokens && options.docTokens) {\n      code = processDocTokens(result, code, true);\n    }\n\n    return result.render(code);\n  }\n\n\n  result.renderer.code = function(code, language) {\n    if (language) {\n      if (language.match(/^if:/)) {\n        return matchIfBlockLanguage(result, language) ? render(code) : '';\n      }\n      else if (language.match(/^if-not:/)) {\n        return matchIfBlockLanguage(result, language) ? '' : render(code);\n      }\n      else if (language.match(/^tab:/)) {\n        return handleTab(result, code, language);\n      }\n      else if (result.extensions.indexOf(language) >= 0) {\n        return handleExtension(options, result, code, language);\n      }\n      else if (language === '%definitions' || language === '%doc') {\n        return wrapInBlockDiv(language, renderDefinitions(result, code, render));\n      }\n      else if (language === '%method-doc') {\n        return wrapInBlockDiv('docs method-doc', render(methodDoc(code)));\n      }\n      else if (language[0] === '%') {\n        return wrapInBlockDiv(language, result.render(code));\n      }\n\n      // make sure this is a language and not some random tag\n      const foundLanguage = options.findLanguage(language.split(':')[0]);\n\n      if (foundLanguage) {\n        // if filtering is enabled and this is not the active language then filter it out\n        if (options.filterLanguages && foundLanguage !== result.language && result.language) {\n          return '';\n        }\n\n        // if CodeMirror is provided then highlight using that instead\n        if (options.cm) {\n          return highlightCM(options, code, foundLanguage, language);\n        }\n      }\n      // process line numbers, if they are set (i.e. ruby:10) in a naive simple way\n      else if (options.lineNumbers) {\n        code = lineNumbers(code, language);\n      }\n    }\n\n    return wrapLanguage(options, _code.call(result.renderer, code, language), language);\n  }\n}\n\nfunction lineNumbers(code, language, wrapper = '@@ ') {\n  let lineNumber = getLineNumber(language);\n\n  // if there are line numbers, then add them now starting at the start index\n  if (lineNumber > 0) {\n    code = code.split('\\n').map(line => {\n      return `${wrapper.replace('@@', lineNumber++)}${line}`\n    }).join('\\n');\n  }\n\n  return code;\n}\n\nfunction wrapLanguage(options, code, language) {\n  // if we have reached this point then CM isn't enabled and we need to\n  if (language && options.languageWrapper) {\n    if (typeof options.languageWrapper === 'function') {\n      code = options.languageWrapper(code, language);\n    }\n    else {\n      code = options.languageWrapper.replace('{slot}', code);\n    }\n  }\n\n  return code;\n}\n\nfunction highlightCM(options, code, language, raw) {\n  const el = window.document.createElement('div');\n  options.cm.runMode(code, options.findMode(language), el);\n\n  let codeHtml = el.innerHTML;\n  if (options.lineNumbers) {\n    codeHtml = lineNumbers(codeHtml, raw, '<span class=\"cm-line-number\">@@</span>');\n  }\n\n  const result = `<pre class=\"cm-runmode cm-s-${options.theme}\"><code>${codeHtml}</code></pre>`;\n  return wrapLanguage(options, result, language);\n}\n\nfunction getLineNumber(language) {\n  const parts = language.split(':');\n  return parts.length > 1 ? parseInt(parts[1], 10) : null;\n}\n\nfunction wrapInBlockDiv(type, contents) {\n  return `<div class=\"block block--${type.replace(/^%/, '')}\">${contents}</div>`;\n}\n\nfunction matchIfBlockLanguage(result, language) {\n  return language.replace(/^if(-not)?: ?/, '').split(',').indexOf(result.originalLanguage) >= 0;\n}\n\nfunction handleTab(result, code, language) {\n  // parts should be up to tab:LABEL with language being optional\n  const parts = language.split(':');\n  let label = parts[1].replace(/\\+/g, ' ');\n  result.tabs[label] = `${result.render(code)}`;\n  return '';\n}\n\n/**\n * If the extension value is a function, it will treat it as a render function, otherwise it will\n * assume the extension value is a string and treat it as a template with {code} as the code placeholder.\n * @param options\n * @param code\n * @param language\n */\nfunction handleExtension(options, result, code, language) {\n  const ext = options.extensions[language]\n\n  if (typeof ext.code === 'function') {\n    return ext.code(code, options);\n  }\n  else {\n    return ext.code.replace('{code}', code);\n  }\n}\n\n/**\n *\n * @param result\n * @param code\n * @returns {string}\n */\nfunction renderDefinitions (result, code, render) {\n  var html = '<dl>';\n  if (code) {\n    code.split('\\n').forEach(line => {\n      if (line.match(/^#/)) {\n        html += render(line);\n      }\n      else if (line.match(/: *$/)) {\n        html += `<dt>${line.replace(/:$/, '')}</dt>`;\n      }\n      else {\n        // if line starts with 4 white spaces, a tab or a ` block, then consider it a pre tag and don't render dfn\n        html += `<dd>${render(line, !!line.match(/^(\\t|\\s{4}|`)/))}</dd>`;\n      }\n    });\n  }\n\n  return html + '</dl>';\n}\n","import { assignMissing } from './objects'\nimport { buildRenderer } from './renderer'\nimport { processDocTokens } from './doc-tokens'\n\nexport const defaultOptions = {\n  // these are the options passed to marked directly\n  marked: {},\n  // languages that should be treated as extensions. You can configure how each gets handled\n  extensions: {\n    mermaid: {\n      // code handler\n      code: code => `<div class=\"mermaid\">${code}</div>`,\n      // will lazy load script automatically\n      src: 'https://cdn.rawgit.com/knsv/mermaid/6.0.0/dist/mermaid.min.js',\n      afterRender: () => window.mermaid && window.mermaid.init()\n    },\n  },\n  // set to a method that that will receive a language and return the mapped\n  // name. if no name is returned, it is assumed that the language is an extension.\n  // The default method only handles a default set of languages.\n  findLanguage: (language) => defaultLanguages.indexOf(language) >= 0 ? language: null,\n\n  // used with CodeMirror.runMode, used to find the mode of the language. By default will just return the language\n  findMode: (language) => language,\n\n  // The highlight theme to add, only used with cm runMode\n  theme: 'neo',\n\n  // you can set icons within headers using icon::ICONNAME, this setting determines the icon class prefix used\n  iconClassPrefix: 'icon-',\n\n  // set to a value that should wrap standard languages. Use \"{slot}\" to indicate where the code should be inserted: i.e.\n  // '<div class=\"tab\">{code}</div>'. Can also be a function which takes (code, language) as its parameters.\n  languageWrapper: null,\n\n  // the language that should be used for filtering out all other languages\n  language: null,\n\n  // true if languages should be filtered\n  filterLanguages: true,\n\n  // if the language value is not set, or is set to a value not found within the markdown, this\n  // setting will default the language to the first one found within the markdown.\n  defaultLanguageToFirst: true,\n\n  // true if line numbers should be added to highlighted code (if a starting line number is configured for the block)\n  lineNumbers: true,\n\n  // css class used to display a line number gutter, which can be used to try to create an opacity layer\n  // which will style the cm-number values differently. Set to null to disable adding a gutter.\n  lineNumbersGutter: 'cm-runmode-linenumbers-gutter',\n\n  // true if doc tokens should be parsed\n  docTokens: true,\n\n  // if set to an instance of js-yaml, it will process meta data at the top of the markdown.\n  jsYaml: null,\n\n  // If set to CodeMirror class, it will use CodeMirror.runMode to process syntax highlighting\n  // Note: make sure to import codemirror/addon/runmode/runmode.js first.\n  cm: null,\n\n  // set to automatically load a CM language. This is provided by default but you can override if you wish\n  // to override. This option is only used if both cm and loadScript are set.\n  // You can set this to null if you do not wish or need to load languages dynamically\n  loadCMLanguage: (language, options) => {\n    return options.loadScript(`//cdnjs.cloudflare.com/ajax/libs/codemirror/${options.cm.version}/mode/${language}/${language}.min.js`);\n  },\n\n  // If you wish to support loading external extension scripts, you should set this to a\n  // function that takes a url and returns a promise. Note that this function will need to be responsible\n  // for not reloading the same scripts if requested more than once, this library does not take care of caching.\n  loadScript: null,\n\n  // if set to a function, will be called back after all external scripts have loaded\n  onLoaded: null\n};\n\nexport const defaultLanguages = [\n  'c', 'clojure', 'coffeescript', 'cpp', 'csharp', 'elixir', 'erlang', 'fsharp',\n  'go', 'groovy', 'haskell', 'java', 'javascript', 'kotlin', 'objc', 'ocaml', 'php', 'python',\n  'r', 'ruby', 'scala', 'shell', 'solidity', 'sql', 'swift', 'typescript'\n]\n\n/**\n * Processes the markdown using marked along with the many extensions this library provides\n * @param marked The marked library, must be passed in since it is not included within this library as a dependency\n * @param markdown The markdown to process\n * @param options The extended set of options, as well as marked options. See defaultOptions for more details.\n * @returns {{originalLanguage, language, languages: [], extensions: [], tabs: {}, headers: {h1: Array, h2: Array, h3: Array, h4: Array}, icons: [], raw: *, preprocessed: *}}\n */\nexport function process(marked, markdown, options = {}) {\n  assignMissing(options, defaultOptions);\n\n  const result = {\n    originalLanguage: options.language,\n    language: options.language,\n    languages: {},\n    extensions: {},\n    tabs: {},\n    headers: {h1: [], h2: [], h3: [], h4: []},\n    icons: {},\n    raw: markdown,\n    preprocessed: markdown\n  };\n\n  if (options.jsYaml) {\n    processMeta(options, result);\n  }\n\n  processBlocks(options, result);\n  if (options.defaultLanguageToFirst) {\n    processLanguage(result);\n  }\n\n  buildRenderer(marked, options, result);\n\n  var html = null;\n  result.html = () => html || (html = render(options, result));\n  result.afterRender = afterRenderFn(options, result);\n\n  // convert objects which have been acting as basic sets to an array\n  ['languages', 'extensions', 'icons']\n    .forEach(key => result[key] = Object.keys(result[key]));\n\n  if (options.loadScript) {\n    processExternalScripts(options, result);\n  }\n\n  return result;\n}\n\nfunction render(options, result) {\n  let html = result.render(result.preprocessed);\n\n  if (options.docTokens) {\n    html = processDocTokens(result, html);\n  }\n\n  return html;\n}\n\n/**\n * Creates the afterRender function that is added to the result, which can be called once the\n * processed html has been added to the DOM to initialize any extensions that may have been loaded.\n * @param options\n * @param result\n * @returns {Function}\n */\nfunction afterRenderFn(options, result) {\n  return function() {\n    result.extensions.forEach(ext => {\n      const config = options.extensions[ext];\n      if (config && config.afterRender) {\n        config.afterRender.apply(result, arguments);\n      }\n    });\n  }\n}\n\n/**\n * Will loop through extensions and languages and try to dynamically load scripts.\n * @param options\n * @param result\n */\nfunction processExternalScripts(options, result) {\n  const promises = [];\n  result.extensions.forEach(ext => {\n    const config = options.extensions[ext];\n    if (config && config.src) {\n      promises.push(options.loadScript(config.src));\n    }\n  });\n\n  // automatically load the CM language that is shown\n  if (options.cm && options.loadCMLanguage) {\n    // if we filter languages then we only need to load the one being shown\n    if (options.filterLanguages && result.language) {\n      promises.push(options.loadCMLanguage(result.language, options));\n    }\n    // otherwise we need to load them all\n    else if (!options.filterLanguages && result.languages.length) {\n      result.languages.forEach(language => {\n        promises.push(options.loadCMLanguage(language, options));\n      });\n    }\n  }\n\n  Promise.all(promises).then(() => {\n    if (options.onLoaded) {\n      options.onLoaded(result);\n    }\n  });\n}\n\n/**\n * Processes yaml content at the top of the markdown, marked starting by a --- and ending with a ...\n * @param options\n * @param result\n */\nfunction processMeta(options, result) {\n  result.preprocessed = result.preprocessed.replace(/^---\\n(.*\\n)*\\.\\.\\. *\\n\\n?/, meta => {\n    const yaml = meta.replace(/^---\\n/, '').replace(/\\n\\.\\.\\. *\\n?/, '');\n    result.meta = options.jsYaml.safeLoad(yaml);\n\n    return '';\n  });\n}\n\n/**\n * if no language was provided, or the one provided is not in the list of supported languages,\n * then switch to the first language found\n * @param result\n */\nfunction processLanguage(result) {\n  if (!result.language || !result.languages[result.language]) {\n    result.language = Object.keys(result.languages)[0];\n  }\n}\n\n/**\n * Loops through all ``` style blocks and figures out which are languages and which are\n * possibly extensions\n * @param markdown\n * @param options\n * @param result\n */\nfunction processBlocks(options, result) {\n  let blocks = result.preprocessed.match(/^(```|~~~) ?(.*) *$/gm) || [];\n  blocks = blocks.map(m => m.replace(/(```|~~~) ?/g, ''));\n\n  // loop through each block and track which are languages and which are extensions\n  blocks.forEach((text) => {\n    if (text) {\n      text = text.replace(/^if(-not)?: ?/, '').split(':')[0];\n\n      text.split(',').forEach(name => {\n        // % is a special token, we know these aren't either languages or extensions\n        if (name.indexOf('%') === -1) {\n          // if an extension has been defined for the language, track it now\n          if (options.extensions[name]) {\n            result.extensions[name] = true;\n          }\n          else {\n            const language = options.findLanguage(name);\n            if (language) {\n              result.languages[language] = true;\n            }\n          }\n        }\n      })\n    }\n  });\n}\n"],"names":["assignMissing","target","source","keys","forEach","key","upperCaseWords","str","replace","a","toUpperCase","camelCase","pascal","cased","lowerCaseFirst","toLowerCase","substr","escapeHtml","text","unescapeHtml","TYPES","NULLABLE","regex","nestedRegex","replaceDocTypes","language","pre","content","shell","codeStart","value","codeEnd","nullable","match","trim","maybeMapGeneric","mapNullable","wrap","config","default","parts","split","filter","p","length","mapType","collectionType","root","shift","mapped","map","join","type","_default","_alias","indexOf","isTransformedType","Object","nestedType","nestedTypes","plurals","mapTypes","s","addS","result","collectionGeneric","types","t","start","end","STYLES","replaceDocNames","style","findStyle","warn","find","_style","replaceDocGlobals","processDocTokens","html","originalLanguage","globals","names","methodDoc","code","json","JSON","parse","md","methodHeader","desc","push","args","parameters","returnType","constraints","errors","examples","exampleHeader","exampleRows","ex","message","v","i","exampleRow","example","index","name","stringify","arg","returns","line1","line2","getArgs","params","methodName","globalName","global","class","method","buildRenderer","marked","options","renderer","Renderer","markedOptions","render","setupHeader","heading","level","icon","attributes","icons","iconClassPrefix","header","headers","setupCode","_code","preTokens","docTokens","matchIfBlockLanguage","handleTab","extensions","handleExtension","wrapInBlockDiv","renderDefinitions","foundLanguage","findLanguage","filterLanguages","cm","highlightCM","lineNumbers","wrapLanguage","call","wrapper","lineNumber","getLineNumber","line","languageWrapper","raw","el","window","document","createElement","runMode","findMode","codeHtml","innerHTML","theme","parseInt","contents","label","tabs","ext","defaultOptions","mermaid","init","defaultLanguages","loadScript","version","process","markdown","h1","h2","h3","h4","jsYaml","defaultLanguageToFirst","afterRender","afterRenderFn","preprocessed","apply","arguments","processExternalScripts","promises","src","loadCMLanguage","languages","all","then","onLoaded","processMeta","yaml","meta","safeLoad","processLanguage","processBlocks","blocks","m"],"mappings":"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"}